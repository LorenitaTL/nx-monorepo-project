name: CI

on:
  push:
    branches:
      - main

permissions:
  actions: read
  contents: read

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app:
          - nx-monorepo-project
          - create-record
          - update-record
          - records-list
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Build Docker image for app
        run: docker build --build-arg app_name=${{ matrix.app }} -t ${{ matrix.app }}-image .

      - name: Log in to Amazon ECR Public
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws

      - name: Tag Docker image
        # Tagueamos la imagen para cada app en el matrix
        run: |
          docker tag ${{ matrix.app }}-image:latest public.ecr.aws/u4p4s0e4/${{ matrix.app }}:latest

      - name: Push Docker image to ECR Public
        # Empujamos la imagen para cada app en el matrix
        run: |
          docker push public.ecr.aws/u4p4s0e4/${{ matrix.app }}:latest

      # Puedes descomentar esta parte si quieres hacer el despliegue a AWS App Runner despu√©s
      # - name: Deploy to App Runner
      #   run: |
      #     aws apprunner create-service --service-name my-${{ matrix.app }}-service \
      #     --source-configuration ImageRepository:ImageIdentifier=public.ecr.aws/u4p4s0e4/${{ matrix.app }}:latest || \
      #     aws apprunner update-service --service-arn $(aws apprunner list-services --query "ServiceSummaryList[?ServiceName=='my-${{ matrix.app }}-service'].ServiceArn" --output text) \
      #     --source-configuration ImageRepository:ImageIdentifier=public.ecr.aws/u4p4s0e4/${{ matrix.app }}:latest
